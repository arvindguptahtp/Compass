extends /_vefa

block init
    //- element: {},
    //- label: {},
    //- required: {},
    //- group: {},
    //- control: {},
    //- control_label: {},
    //- control_group: {},
    //- help_msg: {},
    //- error_msg: {},

    -
        vefa = new Vefa({
            class: 'field',
            data: {
                name: "field",
                label: "Label",
                required: false,
                placeholder: false,
                index: false,
            },
            inject: ['form'],
            computed: {
                uid () {
                    return (this.index)
                        ? `id_${this.name}_${ v(this.index) }`
                        : `id_${this.name}`
                },
                value () {
                    return `${ this.form }.${ this.name }.value`
                }
            },
            field: {
                class: "tx--f3--100--ls100 rhy--xStart50 thm--tint20 rxn--shade60 fx--shift",
                "o-base": "row--pStart--sBase pad--x50 pad--y25 rhy--xStart25",
                "o-standard": "tx--small"
            },
            field_control: {
                class: "tx--f3--400--ls100--aa rhy--xStart50 rxn--shade60 fx--shift",
                "o-base": "row--pGrid--sBase pad--x50 pad--y25 rhy--xStart25",
                "o-standard": "tx--small"
            },
            field_group: {
                class: "thm--shade20",
                "o-base": "col--pStart--sStart"
            },
            field_label: {
                class: "tx--small--f3--900--tcU--aa",
                "o-base": "mod--balance",
            },
            fold_label: {
                class: "tx--small--f3--900--tcU--aa rxn--shade60 fx--shift",
                "o-base": "row--pGrid--sBase mod--balance pad--x50 pad--y25 rhy--xStart25",
            }
        })

        if(bus.data.field){
            vefa.data(bus.data.field)
        }



block view
    div(
        class=field.class        
        title=field.label
        is=field.fold ? "fold-unfold" : false
        :init="true"
        :styles=field.fold ? field.fold_label : false
    )&attributes(field.element)
        
        block hdr
            label(
                slot="hdr"
                for=field.uid
            )&attributes(field.field_label)
                = field.label
            
        block bd
            div(slot="bd")
                //- this is a general text input
                //- most subclass should overwrite this
                //- however, text, password, number, etc won't need to
                //- and therefore, will only have to subclass the abstract
                input(
                    type=field.type
                    id=field.uid
                    name=field.name
                    placeholder=field.placeholder
                    value=attr_switch(`${ field.value } != None`, v(field.value, "stringformat:'s'", "default_if_none:''"))
                    required=field.required
                )&attributes(field.field)


            //- block help_msg

            //- block error_msg

            //- block ftr
