extends _abstract

block subclass
    -
        vefa
            .define({
                class: "card--list-links",
                data: {
                    heading: "",
                    links: [
                        ["label", "data_member", "style"]
                    ],
                    as_group: [],
                    as_internal: [],
                    as_external: [],
                }, 
                list: {
                    "o-base": "mod--balance rhy--yStart25",
                },
                item: {
                    class: "thm--tint70 tx--small--f2",
                },
                link: {
                    class: "rxn--tint90 fx--shift",
                    "o-base": "row--pStart--sMiddle pad--xy25 rhy--xStart25"
                },
                external_link: {
                    class: "rxn--tint90 fx--shift",
                    "o-base": "row--pStart--sMiddle pad--xy25 rhy--xStart25"
                },
                on_mount () {
                    if(this.links) {
                        let exists_arr = []
                        
                        this.links = this.links.map( (dict) => {
                            if (this.as_group.includes(dict[0])) {
                                //- "group" link from db
                                exists_arr.push(dict[1])
                                return {
                                    group: `item in ${ dict[1] }.all`,
                                    tag: dict[0],
                                    internal: (this.as_internal.includes(dict[0])),
                                    external: (this.as_external.includes(dict[0])),
                                    style: (dict[2]) ? dict[2] : "link"
                                }
                            }
                            else {
                                //- "manual" link
                                return {
                                    single: true,
                                    label: dict[0],
                                    url: dict[1],
                                    internal: (this.as_internal.includes(dict[0])),
                                    external: (this.as_external.includes(dict[0])),
                                    style: (dict[2]) ? dict[2] : "link"
                                }
                            }
                        })

                        exists_arr = exists_arr.map( item => `${ item }.count > 0` )
                        this.exists = exists_arr.join(" or ")
                        
                        if (!this.style) {
                            this.mixin({
                                hdr: {
                                    class: this.impact_theme
                                },
                                bd: {
                                    class: "thm--shade15"
                                },
                                link: {
                                    class: this.impact_color
                                }
                            })
                        }
                    }
                }
            })



block content
    ul&attributes(card.list)
        each entry in card.links
            if entry.single
                //- manual link
                li&attributes(card.item)
                    a(
                        href=entry.url
                        target= (entry.external) ? "_blank" : false 
                        rel= (entry.external) ? "noopener" : false 
                    )&attributes(card[entry.style])
                        span.tx--trnc= entry.label

                        if entry.external
                            svg.ico
                                use(href=`#ico--link-ext`)
            if entry.group
                +for(entry.group)
                    li&attributes(card.item)
                        a(
                            href=(entry.internal) ? v('item.get_absolute_url') : v('item.url')
                            target= (entry.external) ? "_blank" : false 
                            rel= (entry.external) ? "noopener" : false 
                        )&attributes(card[entry.style])
                            div.tx--trnc(
                                o-base="row--pStart--sMiddle--xAuto mod--fit rhy--xStart25 iso--xEnd100"
                            )
                                span.tx--trnc= v('item')

                                if entry.external
                                    svg.ico
                                        use(href=`#ico--link-ext`)
                            
                            if entry.tag
                                small.tx--caption--f3--100--tcU(
                                    o-base="mod--static iso--xStartAuto"
                                )= entry.tag
