extends _abstract

block subclass
    //- [type, data_member / test_member, icon, external, tag],
    -
        vefa.define("card--list-links")
            .data({
                heading: "",
                items: false
            })
            .dom({
                icon: {
                    class: "thm--tint95 co--minor hl--xEnd--bTint",
                    "o-base": "col--pMiddle--sMiddle--xAuto mod--static pad--x25"
                },
                featured_icon: {
                    class: "thm--tint95 hl--xEnd--bTint",
                    "o-base": "col--pMiddle--sMiddle--xAuto mod--static pad--x25"
                },
                svg: {
                    class: "ico--dx100"
                }
            })
            .dom_mix({
                element: {
                    class: "vx--z100",
                },
                list: {
                    "o-base": "mod--balance rhy--yStart25",
                },
                item: {
                    class: "thm--tint70 tx--f2",
                },
                link: {
                    class: "rxn--shade5 fx--shift",
                    "o-base": "col--pStart--sStart pad--xy25",
                    "o-standard": "row--pStart--sMiddle rhy--xStart25"
                },
                external_link: {
                    class: "thm--shade10 rxn--shade5 fx--shift",
                    "o-base": "row--pStart--sMiddle pad--xy25 rhy--xStart25"
                }
            })
            .methods({
                spec_as_link (item) {
                    return {
                        label: item[1],
                        verify: 'True',
                        url: item[2],
                        icon: item[3],
                        external: (item[4]),
                        tag: (item[5]),
                        
                    }
                },

                spec_as_group (item) {
                    return {
                        group: `item in ${ item[1] }.all`,
                        label: v('item', "truncatechars:72"),
                        verify: item[1],
                        url: (item[3]) ? v('item.url') : v('item.get_absolute_url'),
                        icon: item[2],
                        external: (item[3]),
                        tag: (item[4]),
                        
                    }
                },

                spec_as_default () {
                    return {
                        verify: "False"
                    }
                },
                
                spec (item) {
                    const type = item[0]
                    const assigner = (this[`spec_as_${type}`]) 
                        ? this[`spec_as_${type}`](item)
                        : this.spec_as_default(item)

                    return Object.assign( {type}, assigner )
                },

                data_exists (item) {
                    const exists_case = {
                        group: `${ item.verify }.count > 0`
                    }
                    return exists_case[item.type]
                },

                data_mapper () {
                    if(this.items) {
                        let exists_override = false
                        
                        this.items = this.items.map( this.spec, this )

                        this.exists = (this.items.find(x => x.type === 'link' ))
                            ? 'True'
                            : this.items.map( this.data_exists, this).join(' or ')
                    }
                },

                update_dom () {
                    this.dom_mix({
                        hdr: {
                            class: this.impact_theme
                        },
                        bd: {
                            class: "thm--shade15"
                        },
                        link: {
                            class: this.impact_color
                        }
                    })
                }
            })
            .options({
                on_mount () {
                    this.data_mapper()
                    this.update_dom()
                  
                }
            })


block view_mixins
    mixin link_item(item)
        li(v-cloak)&attributes(card.item)
            include /controls/base
                -
                    vefa.data({
                            url: item.url,
                            label: item.label,
                            external: (item.external)
                        })
                        .dom({
                            element: {
                                class: `rxn--shade5 fx--shift ${ card.impact_color }`,
                                "o-base": "col--pStart--sStart",
                                "o-standard": "row--pStart--sFull rhy--xStart25"
                            },
                            bd: {
                                class: `tx--trnc`,
                                "o-base": "pad--x25 pad--y50"
                            }
                        })
                    
                    if (item.featured){
                        vefa.dom_switch({
                            bd: {
                                class: ['', 'tx--900']
                            }
                        })
                    }
                        

                mixin ctrl_pre()
                    if item.icon
                        span&attributes(
                            (item.featured) 
                            ? card.featured_icon
                            : card.icon
                        )
                            svg&attributes(card.svg)
                                use(href=`#ico--${item.icon}`)




block content
    ul(slot="bd")&attributes(card.list)
        for item in card.items
            +if(item.verify)
                case item.type
                    when "group"
                        +for(item.group)
                            if item.item_verify
                                +if(item.item_verify)
                                    +link_item(item)
                            else
                                +link_item(item)

                    when "link"
                        +link_item(item)
